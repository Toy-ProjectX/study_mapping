{"ast":null,"code":"var _jsxFileName = \"/Users/mindong-yeob/Desktop/toyproject_frontend/src/board/views/RegisterPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport RegisterOrEdit from './RegisterOrEdit';\nimport { articleActions } from \"../sagas/articleSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction RegisterPage(props) {\n  _s();\n\n  console.log(\"registerpage 호출\");\n  const dispatch = useDispatch();\n  const {\n    id,\n    views,\n    date,\n    editDate,\n    title,\n    content\n  } = useSelector(state => ({\n    id: state.articleReducers.id,\n    views: state.articleReducers.views,\n    date: state.articleReducers.date,\n    editDate: state.articleReducers.editDate,\n    title: state.articleReducers.title,\n    content: state.articleReducers.content\n  }), shallowEqual);\n  const [IsForUpdate, setIsForUpdate] = useState(false);\n  useEffect(() => {\n    const searchParams = new URLSearchParams(props.location.search);\n\n    if (searchParams.get(\"isForEdit\") === \"true\") {\n      dispatch(articleActions.fetchArticle(props.match.params.articleId));\n      setIsForUpdate(true);\n    }\n  }, [id]);\n\n  const onRegisterChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    dispatch(articleActions.changeRegisterInput({\n      name: name,\n      value: value\n    }));\n  };\n\n  const onSubmitArticle = event => {\n    event.preventDefault();\n\n    if (title === \"\" || title === null || title === undefined) {\n      alert(\"제목을 작성하십시오.\");\n      return false;\n    }\n\n    if (content === \"\" || content === null || content === undefined) {\n      alert(\"내용을 작성하십시오.\");\n      return false;\n    }\n\n    const article = {\n      id: id,\n      ///\n      title: title,\n      content: content,\n      views: views,\n      date: date,\n      editDate: IsForUpdate ? Date.now() : editDate\n    };\n\n    if (IsForUpdate) {\n      dispatch(articleActions.updateArticle(article));\n    } else {\n      dispatch(articleActions.registerArticle(article));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(RegisterOrEdit, {\n      titleValue: title,\n      contentValue: content,\n      handleRegisterChange: onRegisterChange,\n      handleSubmit: onSubmitArticle,\n      updateRequest: IsForUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(RegisterPage, \"ultgw8N6CV+bD7f3UG9/sRxkzoM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = RegisterPage;\nexport default RegisterPage; // query 나 프로퍼티에  edit/${id}/////?isEdit=true => (api 부분에서 true 이면)(edit이면) getArticleDetail(id) data, useEffect false는 data null, 아니면 set initialState\n// 버튼도 isEdit 여부에 따라 바뀌어야 함\n// onClick 이벤트도 다르게 넣어서 dispatch registerArticle editArticle 따로 타야 함\n// 아니면 registerPage만 container처럼 만들어서 container에서 edit/register에 따라 props 다르게 넣어주면 되긴 함\n// https://medium.com/@ghur2002/react-router%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-component%EA%B0%84%EC%97%90-props-%EB%84%98%EA%B2%A8%EC%A3%BC%EA%B8%B0-610de3511c67\n// https://soldonii.tistory.com/115?category=862200\n// https://soldonii.tistory.com/112?category=862200\n// https://gongbu-ing.tistory.com/44\n//  =>>>> container로 빼자! (react router 의 match, search 이용, qs parse Location 이용)\n// 조회수는 reducer에서 처리\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterPage\");","map":{"version":3,"sources":["/Users/mindong-yeob/Desktop/toyproject_frontend/src/board/views/RegisterPage.js"],"names":["React","useState","useEffect","useDispatch","useSelector","shallowEqual","RegisterOrEdit","articleActions","RegisterPage","props","console","log","dispatch","id","views","date","editDate","title","content","state","articleReducers","IsForUpdate","setIsForUpdate","searchParams","URLSearchParams","location","search","get","fetchArticle","match","params","articleId","onRegisterChange","event","name","value","target","changeRegisterInput","onSubmitArticle","preventDefault","undefined","alert","article","Date","now","updateArticle","registerArticle"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {useDispatch, useSelector, shallowEqual} from \"react-redux\"\nimport RegisterOrEdit from './RegisterOrEdit'\nimport {articleActions} from \"../sagas/articleSlice\"\n\nfunction RegisterPage(props) {\n  console.log(\"registerpage 호출\");\n    const dispatch = useDispatch();\n  \n    const { id, views, date, editDate, title, content } = useSelector(\n      (state) => ({\n        id: state.articleReducers.id,\n        views: state.articleReducers.views,\n        date: state.articleReducers.date,\n        editDate: state.articleReducers.editDate,\n        title: state.articleReducers.title,\n        content: state.articleReducers.content,\n      }),\n      shallowEqual\n    );\n  \n    const [IsForUpdate, setIsForUpdate] = useState(false);\n  \n    useEffect(() => {\n      const searchParams = new URLSearchParams(props.location.search);\n      if (searchParams.get(\"isForEdit\") === \"true\") {\n        dispatch(articleActions.fetchArticle(props.match.params.articleId));\n        setIsForUpdate(true);\n      }\n    }, [id]);\n  \n    const onRegisterChange = (event) => {\n      const { name, value } = event.target;\n      dispatch(articleActions.changeRegisterInput({ name: name, value: value }));\n    };\n  \n    const onSubmitArticle = (event) => {\n      event.preventDefault();\n  \n      if (title === \"\" || title === null || title === undefined) {\n        alert(\"제목을 작성하십시오.\");\n        return false;\n      }\n  \n      if (content === \"\" || content === null || content === undefined) {\n        alert(\"내용을 작성하십시오.\");\n        return false;\n      }\n  \n      const article = {\n        id: id, ///\n        title: title,\n        content: content,\n        views: views,\n        date: date,\n        editDate: IsForUpdate ? Date.now() : editDate,\n      };\n  \n      if (IsForUpdate) {\n        dispatch(articleActions.updateArticle(article));\n      } else {\n        dispatch(articleActions.registerArticle(article));\n      }\n    };\n  \n    return (\n      <>\n        <RegisterOrEdit\n          titleValue={title}\n          contentValue={content}\n          handleRegisterChange={onRegisterChange}\n          handleSubmit={onSubmitArticle}\n          updateRequest={IsForUpdate}\n        />\n      </>\n    );\n  }\n  \n  export default RegisterPage;\n  \n  // query 나 프로퍼티에  edit/${id}/////?isEdit=true => (api 부분에서 true 이면)(edit이면) getArticleDetail(id) data, useEffect false는 data null, 아니면 set initialState\n  // 버튼도 isEdit 여부에 따라 바뀌어야 함\n  // onClick 이벤트도 다르게 넣어서 dispatch registerArticle editArticle 따로 타야 함\n  \n  // 아니면 registerPage만 container처럼 만들어서 container에서 edit/register에 따라 props 다르게 넣어주면 되긴 함\n  // https://medium.com/@ghur2002/react-router%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-component%EA%B0%84%EC%97%90-props-%EB%84%98%EA%B2%A8%EC%A3%BC%EA%B8%B0-610de3511c67\n  // https://soldonii.tistory.com/115?category=862200\n  // https://soldonii.tistory.com/112?category=862200\n  // https://gongbu-ing.tistory.com/44\n  \n  //  =>>>> container로 빼자! (react router 의 match, search 이용, qs parse Location 이용)\n  \n  // 조회수는 reducer에서 처리"]},"metadata":{},"sourceType":"module"}